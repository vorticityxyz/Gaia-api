# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gaia_pb2 as gaia__pb2


class GaiaServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StatusCheck = channel.unary_unary(
                '/GaiaServer/StatusCheck',
                request_serializer=gaia__pb2.StatusRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.Reset = channel.unary_unary(
                '/GaiaServer/Reset',
                request_serializer=gaia__pb2.ResetRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.SanityCheck = channel.stream_unary(
                '/GaiaServer/SanityCheck',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.SanityReply.FromString,
                )
        self.Upload = channel.stream_unary(
                '/GaiaServer/Upload',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.UploadReply.FromString,
                )
        self.Execute = channel.unary_stream(
                '/GaiaServer/Execute',
                request_serializer=gaia__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=gaia__pb2.ProgressReply.FromString,
                )
        self.Download = channel.unary_stream(
                '/GaiaServer/Download',
                request_serializer=gaia__pb2.DownloadRequest.SerializeToString,
                response_deserializer=gaia__pb2.Chunk.FromString,
                )
        self.CleanUp = channel.unary_unary(
                '/GaiaServer/CleanUp',
                request_serializer=gaia__pb2.CleanUpRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.rtmSanityCheck = channel.stream_unary(
                '/GaiaServer/rtmSanityCheck',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.SanityReply.FromString,
                )
        self.rtmUpload = channel.stream_unary(
                '/GaiaServer/rtmUpload',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.UploadReply.FromString,
                )
        self.rtmExecute = channel.unary_stream(
                '/GaiaServer/rtmExecute',
                request_serializer=gaia__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=gaia__pb2.ProgressReply.FromString,
                )
        self.rtmDownload = channel.unary_stream(
                '/GaiaServer/rtmDownload',
                request_serializer=gaia__pb2.DownloadRequest.SerializeToString,
                response_deserializer=gaia__pb2.Chunk.FromString,
                )
        self.rtmCleanUp = channel.unary_unary(
                '/GaiaServer/rtmCleanUp',
                request_serializer=gaia__pb2.CleanUpRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.eForwardSanityCheck = channel.stream_unary(
                '/GaiaServer/eForwardSanityCheck',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.SanityReply.FromString,
                )
        self.eForwardUpload = channel.stream_unary(
                '/GaiaServer/eForwardUpload',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.UploadReply.FromString,
                )
        self.eForwardExecute = channel.unary_stream(
                '/GaiaServer/eForwardExecute',
                request_serializer=gaia__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=gaia__pb2.ProgressReply.FromString,
                )
        self.eForwardDownload = channel.unary_stream(
                '/GaiaServer/eForwardDownload',
                request_serializer=gaia__pb2.DownloadRequest.SerializeToString,
                response_deserializer=gaia__pb2.Chunk.FromString,
                )
        self.eForwardCleanUp = channel.unary_unary(
                '/GaiaServer/eForwardCleanUp',
                request_serializer=gaia__pb2.CleanUpRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.eRTMSanityCheck = channel.stream_unary(
                '/GaiaServer/eRTMSanityCheck',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.SanityReply.FromString,
                )
        self.eRTMUpload = channel.stream_unary(
                '/GaiaServer/eRTMUpload',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.UploadReply.FromString,
                )
        self.eRTMExecute = channel.unary_stream(
                '/GaiaServer/eRTMExecute',
                request_serializer=gaia__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=gaia__pb2.ProgressReply.FromString,
                )
        self.eRTMDownload = channel.unary_stream(
                '/GaiaServer/eRTMDownload',
                request_serializer=gaia__pb2.DownloadRequest.SerializeToString,
                response_deserializer=gaia__pb2.Chunk.FromString,
                )
        self.eRTMCleanUp = channel.unary_unary(
                '/GaiaServer/eRTMCleanUp',
                request_serializer=gaia__pb2.CleanUpRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.BatchForwardSanityCheck = channel.stream_unary(
                '/GaiaServer/BatchForwardSanityCheck',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.SanityReply.FromString,
                )
        self.BatchForwardUpload = channel.stream_unary(
                '/GaiaServer/BatchForwardUpload',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.UploadReply.FromString,
                )
        self.BatchForwardInitExec = channel.unary_unary(
                '/GaiaServer/BatchForwardInitExec',
                request_serializer=gaia__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.BatchForwardStatus = channel.unary_unary(
                '/GaiaServer/BatchForwardStatus',
                request_serializer=gaia__pb2.BatchStatusRequest.SerializeToString,
                response_deserializer=gaia__pb2.BatchStatusReply.FromString,
                )
        self.BatchForwardDownload = channel.unary_stream(
                '/GaiaServer/BatchForwardDownload',
                request_serializer=gaia__pb2.BatchDownloadRequest.SerializeToString,
                response_deserializer=gaia__pb2.BatchChunk.FromString,
                )
        self.BatchForwardCleanUp = channel.unary_unary(
                '/GaiaServer/BatchForwardCleanUp',
                request_serializer=gaia__pb2.CleanUpRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.rUploadSanityCheck = channel.unary_unary(
                '/GaiaServer/rUploadSanityCheck',
                request_serializer=gaia__pb2.RemoteUploadSanityRequest.SerializeToString,
                response_deserializer=gaia__pb2.SanityReply.FromString,
                )
        self.rUpload = channel.stream_unary(
                '/GaiaServer/rUpload',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.UploadReply.FromString,
                )
        self.rForwardUpload = channel.stream_unary(
                '/GaiaServer/rForwardUpload',
                request_serializer=gaia__pb2.Chunk.SerializeToString,
                response_deserializer=gaia__pb2.RemoteUploadReply.FromString,
                )
        self.rForwardInitExec = channel.unary_unary(
                '/GaiaServer/rForwardInitExec',
                request_serializer=gaia__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.rForwardStatus = channel.unary_unary(
                '/GaiaServer/rForwardStatus',
                request_serializer=gaia__pb2.BatchStatusRequest.SerializeToString,
                response_deserializer=gaia__pb2.BatchStatusReply.FromString,
                )
        self.rForwardDownload = channel.unary_stream(
                '/GaiaServer/rForwardDownload',
                request_serializer=gaia__pb2.BatchDownloadRequest.SerializeToString,
                response_deserializer=gaia__pb2.BatchChunk.FromString,
                )
        self.rForwardCleanUp = channel.unary_unary(
                '/GaiaServer/rForwardCleanUp',
                request_serializer=gaia__pb2.CleanUpRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )
        self.rDelete = channel.unary_unary(
                '/GaiaServer/rDelete',
                request_serializer=gaia__pb2.DeleteRequest.SerializeToString,
                response_deserializer=gaia__pb2.StatusReply.FromString,
                )


class GaiaServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StatusCheck(self, request, context):
        """General calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SanityCheck(self, request_iterator, context):
        """Acoustic forward calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Download(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CleanUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rtmSanityCheck(self, request_iterator, context):
        """Acoustic RTM calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rtmUpload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rtmExecute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rtmDownload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rtmCleanUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eForwardSanityCheck(self, request_iterator, context):
        """Elastic forward calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eForwardUpload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eForwardExecute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eForwardDownload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eForwardCleanUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eRTMSanityCheck(self, request_iterator, context):
        """Elastic RTM calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eRTMUpload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eRTMExecute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eRTMDownload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def eRTMCleanUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchForwardSanityCheck(self, request_iterator, context):
        """Batch forward process calls
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchForwardUpload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchForwardInitExec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchForwardStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchForwardDownload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchForwardCleanUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rUploadSanityCheck(self, request, context):
        """Remote operators
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rUpload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rForwardUpload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rForwardInitExec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rForwardStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rForwardDownload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rForwardCleanUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rDelete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GaiaServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StatusCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.StatusCheck,
                    request_deserializer=gaia__pb2.StatusRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=gaia__pb2.ResetRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'SanityCheck': grpc.stream_unary_rpc_method_handler(
                    servicer.SanityCheck,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.SanityReply.SerializeToString,
            ),
            'Upload': grpc.stream_unary_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.UploadReply.SerializeToString,
            ),
            'Execute': grpc.unary_stream_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=gaia__pb2.ExecuteRequest.FromString,
                    response_serializer=gaia__pb2.ProgressReply.SerializeToString,
            ),
            'Download': grpc.unary_stream_rpc_method_handler(
                    servicer.Download,
                    request_deserializer=gaia__pb2.DownloadRequest.FromString,
                    response_serializer=gaia__pb2.Chunk.SerializeToString,
            ),
            'CleanUp': grpc.unary_unary_rpc_method_handler(
                    servicer.CleanUp,
                    request_deserializer=gaia__pb2.CleanUpRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'rtmSanityCheck': grpc.stream_unary_rpc_method_handler(
                    servicer.rtmSanityCheck,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.SanityReply.SerializeToString,
            ),
            'rtmUpload': grpc.stream_unary_rpc_method_handler(
                    servicer.rtmUpload,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.UploadReply.SerializeToString,
            ),
            'rtmExecute': grpc.unary_stream_rpc_method_handler(
                    servicer.rtmExecute,
                    request_deserializer=gaia__pb2.ExecuteRequest.FromString,
                    response_serializer=gaia__pb2.ProgressReply.SerializeToString,
            ),
            'rtmDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.rtmDownload,
                    request_deserializer=gaia__pb2.DownloadRequest.FromString,
                    response_serializer=gaia__pb2.Chunk.SerializeToString,
            ),
            'rtmCleanUp': grpc.unary_unary_rpc_method_handler(
                    servicer.rtmCleanUp,
                    request_deserializer=gaia__pb2.CleanUpRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'eForwardSanityCheck': grpc.stream_unary_rpc_method_handler(
                    servicer.eForwardSanityCheck,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.SanityReply.SerializeToString,
            ),
            'eForwardUpload': grpc.stream_unary_rpc_method_handler(
                    servicer.eForwardUpload,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.UploadReply.SerializeToString,
            ),
            'eForwardExecute': grpc.unary_stream_rpc_method_handler(
                    servicer.eForwardExecute,
                    request_deserializer=gaia__pb2.ExecuteRequest.FromString,
                    response_serializer=gaia__pb2.ProgressReply.SerializeToString,
            ),
            'eForwardDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.eForwardDownload,
                    request_deserializer=gaia__pb2.DownloadRequest.FromString,
                    response_serializer=gaia__pb2.Chunk.SerializeToString,
            ),
            'eForwardCleanUp': grpc.unary_unary_rpc_method_handler(
                    servicer.eForwardCleanUp,
                    request_deserializer=gaia__pb2.CleanUpRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'eRTMSanityCheck': grpc.stream_unary_rpc_method_handler(
                    servicer.eRTMSanityCheck,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.SanityReply.SerializeToString,
            ),
            'eRTMUpload': grpc.stream_unary_rpc_method_handler(
                    servicer.eRTMUpload,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.UploadReply.SerializeToString,
            ),
            'eRTMExecute': grpc.unary_stream_rpc_method_handler(
                    servicer.eRTMExecute,
                    request_deserializer=gaia__pb2.ExecuteRequest.FromString,
                    response_serializer=gaia__pb2.ProgressReply.SerializeToString,
            ),
            'eRTMDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.eRTMDownload,
                    request_deserializer=gaia__pb2.DownloadRequest.FromString,
                    response_serializer=gaia__pb2.Chunk.SerializeToString,
            ),
            'eRTMCleanUp': grpc.unary_unary_rpc_method_handler(
                    servicer.eRTMCleanUp,
                    request_deserializer=gaia__pb2.CleanUpRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'BatchForwardSanityCheck': grpc.stream_unary_rpc_method_handler(
                    servicer.BatchForwardSanityCheck,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.SanityReply.SerializeToString,
            ),
            'BatchForwardUpload': grpc.stream_unary_rpc_method_handler(
                    servicer.BatchForwardUpload,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.UploadReply.SerializeToString,
            ),
            'BatchForwardInitExec': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchForwardInitExec,
                    request_deserializer=gaia__pb2.ExecuteRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'BatchForwardStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchForwardStatus,
                    request_deserializer=gaia__pb2.BatchStatusRequest.FromString,
                    response_serializer=gaia__pb2.BatchStatusReply.SerializeToString,
            ),
            'BatchForwardDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.BatchForwardDownload,
                    request_deserializer=gaia__pb2.BatchDownloadRequest.FromString,
                    response_serializer=gaia__pb2.BatchChunk.SerializeToString,
            ),
            'BatchForwardCleanUp': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchForwardCleanUp,
                    request_deserializer=gaia__pb2.CleanUpRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'rUploadSanityCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.rUploadSanityCheck,
                    request_deserializer=gaia__pb2.RemoteUploadSanityRequest.FromString,
                    response_serializer=gaia__pb2.SanityReply.SerializeToString,
            ),
            'rUpload': grpc.stream_unary_rpc_method_handler(
                    servicer.rUpload,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.UploadReply.SerializeToString,
            ),
            'rForwardUpload': grpc.stream_unary_rpc_method_handler(
                    servicer.rForwardUpload,
                    request_deserializer=gaia__pb2.Chunk.FromString,
                    response_serializer=gaia__pb2.RemoteUploadReply.SerializeToString,
            ),
            'rForwardInitExec': grpc.unary_unary_rpc_method_handler(
                    servicer.rForwardInitExec,
                    request_deserializer=gaia__pb2.ExecuteRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'rForwardStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.rForwardStatus,
                    request_deserializer=gaia__pb2.BatchStatusRequest.FromString,
                    response_serializer=gaia__pb2.BatchStatusReply.SerializeToString,
            ),
            'rForwardDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.rForwardDownload,
                    request_deserializer=gaia__pb2.BatchDownloadRequest.FromString,
                    response_serializer=gaia__pb2.BatchChunk.SerializeToString,
            ),
            'rForwardCleanUp': grpc.unary_unary_rpc_method_handler(
                    servicer.rForwardCleanUp,
                    request_deserializer=gaia__pb2.CleanUpRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
            'rDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.rDelete,
                    request_deserializer=gaia__pb2.DeleteRequest.FromString,
                    response_serializer=gaia__pb2.StatusReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GaiaServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GaiaServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StatusCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/StatusCheck',
            gaia__pb2.StatusRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/Reset',
            gaia__pb2.ResetRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SanityCheck(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/SanityCheck',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.SanityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Upload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/Upload',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.UploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/Execute',
            gaia__pb2.ExecuteRequest.SerializeToString,
            gaia__pb2.ProgressReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/Download',
            gaia__pb2.DownloadRequest.SerializeToString,
            gaia__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CleanUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/CleanUp',
            gaia__pb2.CleanUpRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rtmSanityCheck(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/rtmSanityCheck',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.SanityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rtmUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/rtmUpload',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.UploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rtmExecute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/rtmExecute',
            gaia__pb2.ExecuteRequest.SerializeToString,
            gaia__pb2.ProgressReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rtmDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/rtmDownload',
            gaia__pb2.DownloadRequest.SerializeToString,
            gaia__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rtmCleanUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/rtmCleanUp',
            gaia__pb2.CleanUpRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eForwardSanityCheck(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/eForwardSanityCheck',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.SanityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eForwardUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/eForwardUpload',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.UploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eForwardExecute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/eForwardExecute',
            gaia__pb2.ExecuteRequest.SerializeToString,
            gaia__pb2.ProgressReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eForwardDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/eForwardDownload',
            gaia__pb2.DownloadRequest.SerializeToString,
            gaia__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eForwardCleanUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/eForwardCleanUp',
            gaia__pb2.CleanUpRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eRTMSanityCheck(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/eRTMSanityCheck',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.SanityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eRTMUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/eRTMUpload',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.UploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eRTMExecute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/eRTMExecute',
            gaia__pb2.ExecuteRequest.SerializeToString,
            gaia__pb2.ProgressReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eRTMDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/eRTMDownload',
            gaia__pb2.DownloadRequest.SerializeToString,
            gaia__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def eRTMCleanUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/eRTMCleanUp',
            gaia__pb2.CleanUpRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchForwardSanityCheck(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/BatchForwardSanityCheck',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.SanityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchForwardUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/BatchForwardUpload',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.UploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchForwardInitExec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/BatchForwardInitExec',
            gaia__pb2.ExecuteRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchForwardStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/BatchForwardStatus',
            gaia__pb2.BatchStatusRequest.SerializeToString,
            gaia__pb2.BatchStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchForwardDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/BatchForwardDownload',
            gaia__pb2.BatchDownloadRequest.SerializeToString,
            gaia__pb2.BatchChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchForwardCleanUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/BatchForwardCleanUp',
            gaia__pb2.CleanUpRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rUploadSanityCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/rUploadSanityCheck',
            gaia__pb2.RemoteUploadSanityRequest.SerializeToString,
            gaia__pb2.SanityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/rUpload',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.UploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rForwardUpload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/GaiaServer/rForwardUpload',
            gaia__pb2.Chunk.SerializeToString,
            gaia__pb2.RemoteUploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rForwardInitExec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/rForwardInitExec',
            gaia__pb2.ExecuteRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rForwardStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/rForwardStatus',
            gaia__pb2.BatchStatusRequest.SerializeToString,
            gaia__pb2.BatchStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rForwardDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GaiaServer/rForwardDownload',
            gaia__pb2.BatchDownloadRequest.SerializeToString,
            gaia__pb2.BatchChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rForwardCleanUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/rForwardCleanUp',
            gaia__pb2.CleanUpRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GaiaServer/rDelete',
            gaia__pb2.DeleteRequest.SerializeToString,
            gaia__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
