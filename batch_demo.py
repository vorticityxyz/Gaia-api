# Description:
# 
# This example shows how to use Vorticity gaia batchf28pml operator to run the 
# forward operator (f28pml) in batch model. The operator will take in a large
# velocity model and generate a sweep of shot records for smaller "shotboxes".
# This in essense mimicks a data gathering operation of a large seismic survey.
#
# Advantages: The function will enable the vorticity servers to both process data
# and do I/O operations at the same time. This hides the latency of any data transfer
# operations and gets results faster relative to calling individual f28pml operations.
# 
# Input parameters for the operator is generated by the 
# function generate_test_data() and is as follows:
#
# model - 3D numpy array representing the ful velocity model
# shobox - Defines the dimensions of the shotbox to run the forward operator
# sweep - Defines starting location, ending location and step size of the sweep 
# shot - 1D numpy array representing the shot profile spanning the all timesteps
# shotxyz - Cartesian coordinates of the shot location
# recxxyyz - Cartesian coordinates of the receiver locations
# deltas - dx, dy, dz and dt for the simulation
# pml - width and amplitude of the PML layer
# destination - destination folder where you want the operator to save the shot records
#
# Output: simulated shot record in the form of a 3d numpy array of the format
# shot_record[timestep, x_position, y_position]
# 
# (C) Vorticity Inc. Mountain View, CA 2021
# Licence: MIT

import numpy as np
from pathlib import Path
import gaia

# Generate shot profile
def generate_ricker(nt, freq, dt):
    max_amplitude = 1
    npt = nt * dt
    t = np.arange(-float(npt)/2, float(npt)/2, dt)
    # generate the short waveform
    rick1 = max_amplitude * (1 - t * t * freq**2 * np.pi**2) * np.exp(-t**2 * np.pi**2 * freq**2)
    # Overlay the short waveform over the full length of timesteps
    rick = np.zeros(nt, dtype=np.float32)
    rick[0: nt - (round(nt/2) - round(1/freq/dt) + 1)] = rick1[round(nt/2) - round(1/freq/dt) + 1: nt];
    return rick

def generate_batch_data():
    # Full earth model dimensions
    model_nx = 1001 
    model_ny = 501 
    model_nz = 501 

    # Dimensions of the shotbox for each shot record
    shotbox_nx = 501 
    shotbox_ny = 501 
    shotbox_nz = 501 

    ghost = 4       # ghost points in a 8 spacial stencil

    # Spacial discretization
    dx = 2.5
    dy = dx
    dz = dx

    # temporal discretization
    dt = 0.0004

    # number of timesteps
    nt = 2500

    # Shot parameters (relative to shotbox)
    F = 30
    xs = round(shotbox_nx/2)
    ys = round(shotbox_ny/2)
    zs = ghost

    # Absorbing boundaries
    pmlw = 50
    pmla = 100

    # Receiver parameters (relative to shotbox)
    xt1 = pmlw + ghost
    xt2 = (shotbox_nx - pmlw - ghost - 1)
    yt1 = round(shotbox_ny/2)
    yt2 = round(shotbox_ny/2)
    zt = ghost

    # x sweep parameters (relative to global model)
    x_start = 0         # starting x position of shot box
    x_end = 2           # ending x position of shot box
    x_step = 1          # step length in x direction

    y_start = 0         # starting y position of shot box
    y_end = 0           # ending y position of shot box
    y_step = 0          # step length in y direction

    # Earth model setup
    c1 = 1500**2
    c2 = 2500**2

    # Generate earth model
    model = np.full((model_nx, model_ny, model_nz), c1, dtype=np.float32)   # smooth model
    model[:, :, 151:] = c2                                                  # insert step

    shotbox = np.array([shotbox_nx, shotbox_ny, shotbox_nz], dtype=np.int32)
    sweep = np.array([x_start, x_end, x_step, y_start, y_end, y_step], dtype=np.int32)
    shot = generate_ricker(nt, F, dt)
    shotxyz = np.array([xs, ys, zs], dtype=np.int32)
    recxxyyz = np.array([xt1, xt2, yt1, yt2, zt], dtype=np.int32)
    deltas = np.array([dx, dy, dz, dt], dtype=np.float32)
    pml = np.array([pmlw, pmla], dtype=np.int32)

    return model, shotbox, sweep, shot, shotxyz, recxxyyz, deltas, pml

if __name__ == '__main__':
    
    print("Generating test data.")

    destination = "results/"
    Path(destination).mkdir(parents=True, exist_ok=True)    # create destination if !exist

    model, shotbox, sweep, shot, shotxyz, recxxyyz, deltas, pml = generate_batch_data()

    # Call gaia batch function
    gaia.batchf28pml(model, shotbox, sweep, shot, shotxyz, recxxyyz, deltas, pml, destination)

    # CHECK destination folder for results